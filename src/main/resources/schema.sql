-- Для тестов
DROP TABLE IF EXISTS users, friendship, mpa, films, genres, film_genres, film_likes;

-- Таблица с пользователями
CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR (70)  NOT NULL UNIQUE,
    login VARCHAR(50) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    birthday DATE NOT NULL,
    CONSTRAINT user_const CHECK (login <> '' AND email <> '' )
);

-- Таблица со статусами дружбы
CREATE TABLE IF NOT EXISTS friendship (
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    friend_user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (user_id, friend_user_id)
);

-- Таблица с рейтингами фильмов
CREATE TABLE IF NOT EXISTS mpa (
    mpa_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);

-- Таблица с фильмами
CREATE TABLE IF NOT EXISTS films (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(200) NOT NULL CHECK (name <> ''),
    description VARCHAR(200) NOT NULL,
    duration INTEGER CHECK (duration > 0),
    releaseDate DATE,
    mpa_id INTEGER NOT NULL,
    FOREIGN  KEY (mpa_id) REFERENCES mpa(mpa_id)
);

-- Таблица со всеми жанрами
CREATE TABLE IF NOT EXISTS genres (
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50)
);

-- Таблица с жанрами фильмов
CREATE TABLE IF NOT EXISTS film_genres (
    film_id INTEGER REFERENCES films(id) ON delete CASCADE,
    genre_id INTEGER REFERENCES genres(genre_id) ON delete CASCADE,
    PRIMARY KEY(film_id, genre_id)
);

-- Таблица с лайками пользователей
CREATE TABLE IF NOT EXISTS film_likes (
    film_id INTEGER REFERENCES films(id) ON delete CASCADE,
    user_id INTEGER REFERENCES users(id) ON delete CASCADE,
    PRIMARY KEY(film_id, user_id)
);